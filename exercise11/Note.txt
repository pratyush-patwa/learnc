How	to	Break	It

CASE 1- Get rid	of the	initializers that set up	name.


            int	numbers[4]	=	{	0	};
						char	name[4]	;	
	  
	  printf("numbers:	%d	%d	%d	%d\n",numbers[0],	numbers[1],	numbers[2],	numbers[3]);
  	printf("name	each:	%c	%c	%c	%c\n",name[0],	name[1],	name[2],	name[3]);
		printf("name:	%s\n",	name);

Observation: If we don't initialise then a system value will be print in name and it is compiler dependent.

Output-
numbers: 0 0 0 0 
name each : � � � � 
 
name ��¿ 
numbers: 1 2 3 4 
name each: z e d  
 name zed
another:	zed
another each: z e d




CASE 2- Accidentally	set	name[3]	=	'A'; so	that there’s no terminator.

		
							int	numbers[4]	=	{	0	};
							char	name[4]	=	{	'a'	};
							printf("numbers:	%d	%d	%d	%d\n"numbers[0],	numbers[1],	numbers[2],	numbers[3]);
							printf("name	each:	%c	%c	%c	%c\n",name[0],	name[1],	name[2],	name[3]);

 							printf("name:	%s\n",	name);
 							numbers[0]	=	1;
							numbers[1]	=	2;
							numbers[2]	=	3;
  						numbers[3]	=	4;
  						
							name[0]	=	'Z';
							name[1]	=	'e';
							name[2]	=	'd';
							name[3]	=	'A';
							printf("numbers:	%d	%d	%d	%d\n",
															numbers[0],	numbers[1],	numbers[2],	numbers[3]);

							printf("name	each:	%c	%c	%c	%c\n",
															name[0],	name[1],	name[2],	name[3]);
							//	print	the	name	like	a	string
							printf("name:	%s\n",	name);

Observation: No warning , even A is added in the name at last while we use numm character to terminate the string.

OUTPUT-
numbers: 0 0 0 0 
name each : z e d A
name: zedA 
numbers: 1 2 3 4 
name each: z e d  
name: zed
another:	zed
another each: z e d


Note - The NULL character is written using the escape sequence '0'. The ASCII value of NULL is 0, and NULL is defined as a macro to be 0 in stdio.h; so programs can use the symbol, NULL, in expressions if the header file is included. The remaining elements in the array after the NULL may have any garbage values. When the string is retrieved, it will be retrieved starting at index 0 and succeeding characters are obtained by incrementing the index until the first NULL character is reached signaling the end of the string. 


CASE 3- Set	the	initializer	to	{'a','a','a','a'}	so	that	there	are	too	many	'a'	characters	and	no space	for	the	'\0'	terminator.

              int	numbers[4]	=	{	0	};
							char	name[4]	=	{	'a','a','a','a'};
							printf("numbers:	%d	%d	%d	%d\n"numbers[0],	numbers[1],	numbers[2],	numbers[3]);
							printf("name	each:	%c	%c	%c	%c\n",name[0],	name[1],	name[2],	name[3]);

Observation: As we know,from the above note that string will be starts at index 0 and succeeds character by incrementing the index until the first null character is reached and her while initializing name we havn't specified NULL character hence it prints the same.


Output-
numbers: 0 0 0 0 
name each : aaaa
name: aaaa
numbers: 1 2 3 4 
name each: z e d  
name: zed
another:	zed
another each: z e d


CASE 4- Set numbers[4] to 5.

#include <stdio.h>

int main(int argc, char *argv[])
{
    int numbers[4] = {0};

    // setup the numbers
    numbers[0] = 1;
    numbers[1] = 2;
    numbers[2] = 3;
    numbers[3] = 4;
    numbers[4] = 5;

    // then print them out initialized
    printf("numbers: %d %d %d %d %d\n", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4]);

    return 0;
}


Observation:I thought it will throw an index out of range exception, but it didn't. I searched on the internet and found that C doesn't perform bounds checking. Link given below
https://stackoverflow.com/questions/671703/array-index-out-of-bound-in-c



Extra	Credit

CASE 1-Assign	the	characters	into	numbers,	and	then	use	printf	to	print	them	one	character	at	a	time.
What	kind	of	compiler	warnings	do	you	get?


{
    int numbers[4] = {0};

    // setup the numbers
    numbers[0] = 'a';
    numbers[1] = 'b';
    numbers[2] = 'c';
    numbers[3] = 'd';
   
    // then print them out initialized
    printf("numbers: %c %c %c %c\n", numbers[0], numbers[1], numbers[2], numbers[3]);

    return 0;
}

Observation: No warning and it executed successfully.

CASE 2-Do	the	inverse	for	name,	trying	to	treat	it	like	an	array	of	int	and	print	it	out	one	int	at	a	time.
What	does	the	debugger	think	of	that?

{
    char name[4]= {'a'};

    // setup the numbers
    numbers[0] = 100;
    numbers[1] = 101;
    numbers[2] = 102;
    numbers[3] = 103;
   
    // then print them out initialized
    printf("numbers: %d %d %d %d\n", name[0], name[1], name[2], name[3]);

    return 0;
}


Observation:Same happens with this also no warning an d executed succesfully.


