How to Break It


CASE 1-Initialize	i	to	0	and	see	what	that	does.	Do	you	have	to	adjust	argc	as	well,	or	does	it	just	work?
Why	does	0-based	indexing	work	here?


Observation- Initialize i to 0 prints the name of the program:

arg 0: ./ex13
state 0: California
state 1: Oregon
state 2: Washington
state 3:  Texas

It's not necessary to adjust argc, because it is the number of arguments passed into the program from the command line, including the name of the program. So if i is initialized to 0, and no additional arguments are passed in, argc is 1, i < argc still works.


CASE 2-Set num_states wrong so that it's a higher value and see what it does.

Lets set it to 6:


Observation-
state 0: California
state 1: Oregon
state 2: Washington
state 3:  Texas
zsh: segmentation fault (core dumped)  ./ex13


The language C simply says what should happen if you access the elements within the bounds of an array. It is left undefined what happens if you go out of bounds. It might seem to work today, on your compiler, but it is not legal C or C++, and there is no guarantee that it'll still work the next time you run the program. 

This is because an array is a leftover from C. C arrays are about as primitive as you can get. Just a sequence of elements with contiguous addresses. There is no bounds checking because it is simply exposing raw memory. Implementing a robust bounds-checking mechanism would have been almost impossible in C.




EXTRA CREDIT-


CASE1-	Figure	out	what	kind	of	code	you	can	put	into	the	parts	of	a	for-loop.



The	for-loop	does	a	controlled	counted	loop	through	a	fixed	number	of	iterations	using	a counter:

SYNTAX-
for(INIT;	TEST;	POST)	{
				CODE;
}

The first part is the initialization expression, usually it is used to initialize a loop counter. The second part is a boolean expression, it is evaluated at the beginning of each iteration. And the last part is the increment expression, it is used to increase or decrease the loop counter variable.




CASE2-Look up how to use the ',' (comma) character to separate multiple statements in the parts of the for-loop, but between the ';' (semicolon) characters.


Observation: 
#include <stdio.h>

int main (int argc, char *argv[])
{
    int i = 0;

    // let's make our own array of strings
    char *states[] = {
        "California", "Oregon",
        "Washington", "Texas"
    };

    int num_states = 0;

    for (i = 0, num_states = 4; i < num_states; i++) {
        printf("state %d: %s\n", i, states[i]);
    }

    return 0;
}

Output:
state 0: California
state 1: Oregon
state 2: Washington
state 3: Texas


CASE3-Read what a NULL is and try to use it in one of the elements of the states array to see what it'll print.


Let's set the last element in states array to NULL, and it printed (null).

#include <stdio.h>

int main (int argc, char *argv[])
{
    int i = 0;

    // let's make our own array of strings
    char *states[] = {
        "California", "Oregon",
        "Washington", NULL
    };

    int num_states = 4;

    for (i = 0; i < num_states; i++) {
        printf("state %d: %s\n", i, states[i]);
    }

    return 0;
}

Output:
state 0: California
state 1: Oregon
state 2: Washington
state 3: (null)

NULL is a macro, defined in as a null pointer constant.



CASE 4-See if you can assign an element from the states array to the argv array before printing both. Try the inverse.


Observation:
CASE 4:A: Set an element from the states array to the argv array:

#include <stdio.h>

int main (int argc, char *argv[])
{
    int i = 0;

    char *states[] = {
        "California", "Oregon",
        "Washington", "Texas"
    };

    argv[1] = states[1];

    // go through each string in argv
    // why am I skipping argv[0]?
    for (i = 1; i < argc; i++) {
        printf("arg %d: %s\n", i, argv[i]);
    }

    int num_states = 4;

    for (i = 0; i < num_states; i++) {
        printf("state %d: %s\n", i, states[i]);
    }

    return 0;
}

Output:
$ ./ex10 hello
arg 1: Oregon
state 0: California
state 1: Oregon
state 2: Washington
state 3: Texas



CASE 4:B:
Set an element from the argv array to the states array:

#include <stdio.h>

int main (int argc, char *argv[])
{
    int i = 0;

    char *states[] = {
        "California", "Oregon",
        "Washington", "Texas"
    };

    states[0] = argv[1];

    
    for (i = 1; i < argc; i++) {
        printf("arg %d: %s\n", i, argv[i]);
    }

    int num_states = 4;

    for (i = 0; i < num_states; i++) {
        printf("state %d: %s\n", i, states[i]);
    }

    return 0;
}

Output: 
$ ./ex10 hello
arg 1: hello
state 0: hello
state 1: Oregon
state 2: Washington
state 3: Texas

